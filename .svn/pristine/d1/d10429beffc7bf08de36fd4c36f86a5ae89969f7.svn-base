<template>
  <div class="app-container">
    <el-form :model="queryParams" ref="queryForm" :inline="true" label-width="100px">
      <el-form-item label="数据源名称" prop="dataSourceName">
        <el-input
          v-model="queryParams.dataSourceName"
          placeholder="请输入数据源名称"
          clearable
          size="small"
          @keyup.enter.native="handleQuery"
        />
      </el-form-item>
      <el-form-item label="连接器类型" prop="connectorType" label-width="100px">
        <el-select
          v-model="queryParams.connectorType"
          placeholder="请选择连接器类型"
          clearable
          size="small"
        >
          <el-option
            v-for="dictSource in connectorTypeOptions"
            :key="dictSource.dictValue"
            :label="dictSource.dictLabel"
            :value="dictSource.dictValue"
          />
        </el-select>
      </el-form-item>
      <el-form-item label="描述" prop="description">
        <el-input
          v-model="queryParams.description"
          placeholder="请输入描述"
          clearable
          size="small"
          @keyup.enter.native="handleQuery"
        />
      </el-form-item>
      <el-form-item style="padding-left: 12px">
        <el-button type="primary" icon="el-icon-search" size="mini" @click="handleQuery">搜索</el-button>
        <el-button icon="el-icon-refresh" size="mini" @click="resetQuery">重置</el-button>
      </el-form-item>
    </el-form>

    <el-row :gutter="10" class="mb8">
      <el-col :span="1.5">
        <el-button
          type="primary"
          icon="el-icon-plus"
          size="mini"
          @click="handleAdd"
          v-hasPermi="['system:source:add']"
        >新增
        </el-button>
      </el-col>
      <el-col :span="1.5">
        <el-button
          type="success"
          icon="el-icon-edit"
          size="mini"
          :disabled="single"
          @click="handleUpdate"
          v-hasPermi="['system:source:edit']"
        >修改
        </el-button>
      </el-col>
      <el-col :span="1.5">
        <el-button
          type="danger"
          icon="el-icon-delete"
          size="mini"
          :disabled="multiple"
          @click="handleDelete"
          v-hasPermi="['system:source:remove']"
        >删除
        </el-button>
      </el-col>
      <el-col :span="1.5">
        <el-button
          type="warning"
          icon="el-icon-download"
          size="mini"
          @click="handleExport"
          v-hasPermi="['system:source:export']"
        >导出
        </el-button>
      </el-col>
    </el-row>

    <el-table v-loading="loading" :data="sourceList" @selection-change="handleSelectionChange">
      <el-table-column type="selection" width="55" align="center"/>
      <el-table-column label="序号" width="55" align="center" type="index"/>
      <el-table-column label="数据源名称" align="center" prop="dataSourceName"/>
      <el-table-column
        label="连接器类型"
        align="center"
        prop="connectorType"
        :formatter="connectorTypeMatter"
      />
      <el-table-column label="数据来源" align="center" prop="dataSource"/>
      <el-table-column label="描述" align="center" prop="description"/>
      <el-table-column label="创建时间" align="center" prop="createTime" width="160">
        <template slot-scope="scope">
          <span>{{ parseTime(scope.row.createTime) }}</span>
        </template>
      </el-table-column>

      <el-table-column label="操作" align="center" class-name="small-padding fixed-width">
        <template slot-scope="scope">
          <el-button
            size="mini"
            type="text"
            icon="el-icon-view"
            @click="handleDetail(scope.row)"
            v-hasPermi="['system:source:edit']"
          >详情
          </el-button>
          <el-button
            size="mini"
            type="text"
            icon="el-icon-edit"
            @click="handleUpdate(scope.row)"
            v-hasPermi="['system:source:edit']"
          >修改
          </el-button>
          <el-button
            size="mini"
            type="text"
            icon="el-icon-delete"
            @click="handleDelete(scope.row)"
            v-hasPermi="['system:source:remove']"
          >删除
          </el-button>
        </template>
      </el-table-column>
    </el-table>

    <pagination
      v-show="total>0"
      :total="total"
      :page.sync="queryParams.pageNum"
      :limit.sync="queryParams.pageSize"
      @pagination="getList"
    />

    <!-- 添加或修改数据源表对话框 -->
    <el-dialog :title="title" :visible.sync="open" width="750px" :close-on-click-modal="false">
      <el-form ref="form" :model="form" :rules="rules" label-width="130px">
        <el-form-item label="数据源名称" prop="dataSourceName" class="el-col-12">
          <el-input v-model="form.dataSourceName" placeholder="请输入数据源名称" :disabled="detailViem"/>
        </el-form-item>
        <el-form-item label="连接器类型" prop="connectorType" class="el-col-12">
          <el-select
            v-model="form.connectorType"
            placeholder="请选择连接器类型"
            clearable
            style="width: 225px"
            :disabled="detailViem"
          >
            <el-option
              v-for="dict in connectorTypeOptions"
              :key="dict.dictValue"
              :label="dict.dictLabel"
              :value="dict.dictValue"
            />
          </el-select>
        </el-form-item>
        <el-form-item label="数据来源" prop="dataSource" class="el-col-12">
          <el-input v-model="form.dataSource" placeholder="请输入数据来源" :disabled="detailViem"/>
        </el-form-item>
        <el-form-item label="topic名" prop="topicName" class="el-col-12">
          <el-input v-model="form.topicName" placeholder="请输入topic名" :disabled="detailViem"/>
        </el-form-item>
        <el-form-item label="表名" prop="tableName" class="el-col-12">
          <el-input v-model="form.tableName" placeholder="请输入表名" :disabled="detailViem"/>
        </el-form-item>
        <el-form-item label="消费组" prop="consumerGroup" class="el-col-12">
          <el-input v-model="form.consumerGroup" placeholder="请输入消费组" :disabled="detailViem"/>
        </el-form-item>
        <el-form-item label="消费模式" prop="consumerMode" class="el-col-12">
          <el-select v-model="form.consumerMode" placeholder="请选择消费模式" clearable style="width: 225px"
                     :disabled="detailViem">
            <el-option v-for="dict in consumerModeOptions" :key="dict.dictValue" :label="dict.dictLabel"
                       :value="dict.dictValue"/>
          </el-select>
        </el-form-item>
        <el-form-item label="zookeeper地址" prop="zookeeperAddress" class="el-col-12">
          <el-input
            v-model="form.zookeeperAddress"
            placeholder="请输入zookeeper地址"
            :disabled="detailViem"
          />
        </el-form-item>
        <el-form-item label="kafka地址" prop="kafkaAddress" class="el-col-12">
          <el-input v-model="form.kafkaAddress" placeholder="请输入kafka地址" :disabled="detailViem"/>
        </el-form-item>
        <el-form-item label="描述" prop="description" class="el-col-12">
          <el-input v-model="form.description" placeholder="请输入描述" :disabled="detailViem"/>
        </el-form-item>
        <!-- 动态增加项目 -->
        <!-- 不止一项，用div包裹起来 -->
        <div v-for="(item, index) in form.dynamicItem" :key="index">
          <el-form-item label="schema" class="el-col-12" :prop="'dynamicItem.' + index + '.schemaDefine'"
                        :rules="rules.dynamicItem.schemaDefine">
            <el-input v-model="item.schemaDefine" placeholder="请输入字段" :disabled="detailViem"/>
          </el-form-item>
          <el-form-item class="el-col-12 elementStyle" :prop="'dynamicItem.' + index + '.dataBaseType'"
                        :rules="rules.dynamicItem.dataBaseType">
            <el-select v-model="item.dataBaseType" placeholder="请选择数据类型" clearable style="width: 170px"
                       :disabled="detailViem">
              <el-option v-for="dict in sysDataBaseTypes" :key="dict.dictValue" :label="dict.dictLabel"
                         :value="dict.dictValue"/>
            </el-select>
            <span style="margin-left: 10px">
              <el-button @click="addItem" :disabled="detailViem">
                <i class="el-icon-plus"/>
              </el-button>
              <el-button @click="deleteItem(item, index)" :disabled="detailViem">
                <i class="el-icon-minus"/>
              </el-button>
            </span>
          </el-form-item>
        </div>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button type="primary" @click="submitForm" v-show="showSubmitForm">确 定</el-button>
        <el-button @click="cancel">取 消</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
  import {
    listSource,
    getSource,
    delSource,
    addSource,
    updateSource,
    exportSource
  } from "@/api/source/manage.js";

  export default {
    name: "Manage",
    data() {
      return {
        // 遮罩层
        loading: true,
        // 选中数组
        ids: [],
        // 非单个禁用
        single: true,
        // 非多个禁用
        multiple: true,
        // 总条数
        total: 0,
        // 数据源表表格数据
        sourceList: [],
        // 弹出层标题
        title: "",
        // 是否显示弹出层
        open: false,
        // 数据源类型数据
        dataSourceTypeOptions: [],
        // 连接器类型
        connectorTypeOptions: [],
        // 消费模式类型
        consumerModeOptions: [],
        // 数据类型
        sysDataBaseTypes: [],

        // dynamicItem: [{
        //   schemaDefine:"",
        //   dataBaseType:""
        // }],
        // 控制标签是否可修改
        detailViem: false,
        // 控制【确认】按钮是否显示
        showSubmitForm: true,
        // 查询参数
        queryParams: {
          pageNum: 1,
          pageSize: 10,
          dataSourceId: undefined,
          dataSourceName: undefined,
          dataSourceType: undefined,
          connectorType: undefined,
          dataSource: undefined,
          topicName: undefined,
          tableName: undefined,
          consumerGroup: undefined,
          consumerMode: undefined,
          zookeeperAddress: undefined,
          kafkaAddress: undefined,
          schemaDefine: undefined,
          dataBaseType: undefined,
          description: undefined
        },
        // 表单参数
        form: {},
        // 表单校验
        rules: {
          dataSourceName: [
            {required: true, message: "数据源名称不能为空", trigger: "blur"}
          ],
          dataSourceType: [
            {required: true, message: "数据源类型不能为空", trigger: "blur"}
          ],
          connectorType: [
            {required: true, message: "连接器类型不能为空", trigger: "blur"}
          ],
          dataSource: [
            {required: true, message: "数据来源不能为空", trigger: "blur"}
          ],
          topicName: [
            {required: true, message: "topic名不能为空", trigger: "blur"}
          ],
          tableName: [
            {required: true, message: "表名不能为空", trigger: "blur"}
          ],
          consumerGroup: [
            {required: true, message: "消费组不能为空", trigger: "blur"}
          ],
          consumerMode: [
            {required: true, message: "消费模式不能为空", trigger: "blur"}
          ],
          zookeeperAddress: [
            {required: true, message: "zookeeper地址不能为空", trigger: "blur"}
          ],
          kafkaAddress: [
            {required: true, message: "kafka地址不能为空", trigger: "blur"}
          ],
          dynamicItem: {
            schemaDefine: [
              {required: true, message: "字段不能为空", trigger: "blur"}
            ],
            dataBaseType: [
              {required: true, message: "数据类型不能为空", trigger: "blur"}
            ]
          }
        }
      };
    },
    created() {
      this.getList();
      this.getDicts("sys_source_type").then(response => {
        this.dataSourceTypeOptions = response.data;
      });
      this.getDicts("sys_connector_type").then(response => {
        this.connectorTypeOptions = response.data;
      });
      this.getDicts("sys_consumer_mode").then(response => {
        this.consumerModeOptions = response.data;
      });
      this.getDicts("sys_data_base_type").then(response => {
        this.sysDataBaseTypes = response.data;
      });
    },
    methods: {

      // 增加行
      addItem() {
        this.form.dynamicItem.push({
          schemaDefine: "",
          dataBaseType: ""
        });
      },
      // 删除行
      deleteItem(item, index) {
        if (this.form.dynamicItem && this.form.dynamicItem.length === 1) {
          this.$alert("不能删除所有的字段",{type:"error"});
          return false;
        }
        this.form.dynamicItem.splice(index, 1);
      },
      // 数据源类型字典翻译
      statusDataSourceType(row, column) {
        return this.selectDictLabel(
          this.dataSourceTypeOptions,
          row.dataSourceType
        );
      },
      // 连接器类型字典翻译
      connectorTypeMatter(row, column) {
        return this.selectDictLabel(this.connectorTypeOptions, row.connectorType);
      },
      /** 查询数据源表列表 */
      getList() {
        this.loading = true;
        listSource(this.queryParams).then(response => {
          this.sourceList = response.rows;
          this.total = response.total;
          this.loading = false;
        });
      },
      // 取消按钮
      cancel() {
        this.open = false;
        this.reset();
      },
      // 表单重置
      reset() {
        this.form = {
          dataSourceId: undefined,
          dataSourceName: undefined,
          dataSourceType: undefined,
          connectorType: undefined,
          dataSource: undefined,
          topicName: undefined,
          tableName: undefined,
          consumerGroup: undefined,
          consumerMode: undefined,
          zookeeperAddress: undefined,
          kafkaAddress: undefined,
          schemaDefine: undefined,
          description: undefined,
          dynamicItem: [
            {
              schemaDefine: "",
              dataBaseType: ""
            }
          ]
        };
        this.resetForm("form");
      },
      /** 搜索按钮操作 */
      handleQuery() {
        this.queryParams.pageNum = 1;
        this.getList();
      },
      /** 重置按钮操作 */
      resetQuery() {
        this.resetForm("queryForm");
        this.handleQuery();
      },
      // 多选框选中数据
      handleSelectionChange(selection) {
        this.ids = selection.map(item => item.dataSourceId);
        this.single = selection.length != 1;
        this.multiple = !selection.length;
      },
      /** 新增按钮操作 */
      handleAdd() {
        this.reset();
        this.detailViem = false;
        this.showSubmitForm = true;
        this.open = true;
        this.title = "添加数据源";
      },
      /** 修改按钮操作 */
      handleUpdate(row) {
        this.reset();
        const dataSourceId = row.dataSourceId || this.ids;
        getSource(dataSourceId).then(response => {
          this.form = response.data;
          this.open = true;
          this.detailViem = false;
          this.showSubmitForm = true;
          this.title = "修改数据源";
        });
      },
      /** 详情按钮操作 */
      handleDetail(row) {
        this.reset();
        const dataSourceId = row.dataSourceId || this.ids;
        getSource(dataSourceId).then(response => {
          this.form = response.data;
          this.open = true;
          this.detailViem = true;
          this.showSubmitForm = false;
          this.title = "查看数据源";
        });
      },
      /** 提交按钮 */
      submitForm: function () {
        this.$refs["form"].validate(valid => {
          if (valid) {
            console.log(this.form);
            if (this.form.dataSourceId !== undefined) {
              updateSource(this.form).then(response => {
                if (response.code === 200) {
                  this.msgSuccess("修改成功");
                  this.open = false;
                  this.getList();
                } else {
                  this.msgError(response.msg);
                }
              });
            } else {
              addSource(this.form).then(response => {
                if (response.code === 200) {
                  this.msgSuccess("新增成功");
                  this.open = false;
                  this.getList();
                } else {
                  this.msgError(response.msg);
                }
              });
            }
          }
        });
      },
      /** 删除按钮操作 */
      handleDelete(row) {
        const dataSourceIds = row.dataSourceId || this.ids;
        this.$confirm("是否确认删除该数据项?", "警告", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(function () {
            return delSource(dataSourceIds);
          })
          .then(() => {
            this.getList();
            this.msgSuccess("删除成功");
          })
          .catch(function () {
          });
      },
      /** 导出按钮操作 */
      handleExport() {
        const queryParams = this.queryParams;
        this.$confirm("是否确认导出所有数据源表数据项?", "警告", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(function () {
            return exportSource(queryParams);
          })
          .then(response => {
            this.download(response.msg);
          })
          .catch(function () {
          });
      }
    }
  };
</script>

<style scoped>
  .elementStyle >>> .el-form-item__content {
    margin-left: 45px !important;
  }
</style>
